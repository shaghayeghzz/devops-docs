#!/bin/bash

hosts=/etc/hosts
file=./file

install_gitlab ()
{
    echo "The GitLab Install is Starting... "
    #sudo echo "# this file was generated by packages.gitlab.com for" > /etc/apt/sources.list.d/gitlab_gitlab-ce.list
    #sudo echo "# the repository at https://packages.gitlab.com/gitlab/gitlab-ce" >> /etc/apt/sources.list.d/gitlab_gitlab-ce.list
    #sudo echo "" >> /etc/apt/sources.list.d/gitlab_gitlab-ce.list
    #sudo echo "deb [signed-by=/usr/share/keyrings/gitlab_gitlab-ce-archive-keyring.gpg] https://packages.gitlab.com/gitlab/gitlab-ce/ubuntu/ noble main" >> /etc/apt/sources.list.d/gitlab_gitlab-ce.list
    #sudo echo "deb-src [signed-by=/usr/share/keyrings/gitlab_gitlab-ce-archive-keyring.gpg] https://packages.gitlab.com/gitlab/gitlab-ce/ubuntu/ noble main" >> /etc/apt/sources.list.d/gitlab_gitlab-ce.list
    sleep 2
    apt update
    apt install -y ca-certificates curl openssh-server postfix tzdata perl
    apt install -y postfix
    curl -LO https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.deb.sh | sudo bash
    sudo bash script.deb.sh
    apt install gitlab-ce
}

configure_gitlab ()
{
    masterhost=$(sudo tail -n 1 /etc/hosts | awk '{print $1}')
    sleep 2
    sed -i "s/external_url 'http:\/\/gitlab.example.com'/external_url 'http:\/\/${masterhost}'/g" /etc/gitlab/gitlab.rb
    tail -n 2 /etc/hosts > slave
    slavehost=$(head -n 1 slave | awk '{print $2}')
    sed -i 's/# postgresql\['\''enable'\''] = true/postgresql\['\''enable'\''] = false/g' /etc/gitlab/gitlab.rb
    sed -i 's/# gitlab_rails\['\''db_adapter'\''] = '\"'postgresql'\"'/gitlab_rails\['\''db_adapter'\''] = '\''postgresql'\''/g' /etc/gitlab/gitlab.rb
    sed -i 's/# gitlab_rails\['\''db_encoding'\''] = '\"'unicode'\"'/gitlab_rails\['\''db_encoding'\''] = '\''unicode'\''/g' /etc/gitlab/gitlab.rb
    sed -i 's/# gitlab_rails\['\''db_host'\''] = nil/gitlab_rails\['\''db_host'\''] = '\'''${slavehost}''\''/g' /etc/gitlab/gitlab.rb
    sed -i 's/# gitlab_rails\['\''db_password'\''] = nil/gitlab_rails\['\''db_password'\''] = '\''123456'\''/g' /etc/gitlab/gitlab.rb
    sed -i 's/# gitlab_rails\['\''db_username'\''] = '\"'gitlab'\"'/gitlab_rails\['\''db_username'\''] = '\''postgres'\''/g' /etc/gitlab/gitlab.rb
    sleep 5
    echo "Done.!~ "
    sleep 2
    echo "Now Install and Configure Postgresql in another Server.!~ "
    sleep 4
    echo "You Connect to another Server by SSH Now.!~ "
}

check_gitlab ()
{
    gitlab-ctl status
    if [ `echo $?` == 0 ]; then
	    echo "The GitLab Server is already Installed in your System. "
        read -p "Would you like Configure GitLab (y/n)? " cganswer
	    if [ ${cganswer} == y ]; then
        	configure_gitlab
	    else
		echo "Good Lock!~ . "
	    fi

    else
        echo "The GitLab Server is NOT Installed in your System. "
        read -p "Would you like Install GitLab In your Server (y/n)? " ganswer
        install_gitlab
        configure_gitlab
    fi
}

read_m_s ()
{
    read -p "Enter Master Server IP Address: " master
    read -p "Enter Master Server Host Name: " masterhost
    read -p "Enter Slave Server IP Address: " slave
    read -p "Enter slave Server Host Name: " slavehost
}

input ()
{
    echo ${slave} ${slavehost} >> ${hosts}
    echo ${master} ${masterhost} >> ${hosts}
    echo ${slave} ${slavehost} > ${file}
    echo ${master} ${masterhost} >> ${file}
}

ssh_keygen ()
{
    read -p "Enter Slave Server Username: " name
    ssh-keygen
    ssh-copy-id ${name}@${slavehost}
}

internet_connection()
{
    ping -c 2 8.8.8.8
    if [ `echo $?` == 0 ]; then
        echo "Internet Connection is Established. "
    else
        echo "NO Internet Connection. "
    fi
}

detect_os ()
{
  if [[ ( -z "${os}" ) && ( -z "${dist}" ) ]]; then
    # some systems dont have lsb-release yet have the lsb_release binary and
    # vice-versa
    if [ -e /etc/lsb-release ]; then
      . /etc/lsb-release

      if [ "${ID}" = "raspbian" ]; then
        os=${ID}
        dist=`cut --delimiter='.' -f1 /etc/debian_version`
      else
        os=${DISTRIB_ID}
        dist=${DISTRIB_CODENAME}

        if [ -z "$dist" ]; then
          dist=${DISTRIB_RELEASE}
        fi
      fi

    elif [ `which lsb_release 2>/dev/null` ]; then
      dist=`lsb_release -c | cut -f2`
      os=`lsb_release -i | cut -f2 | awk '{ print tolower($1) }'`

    elif [ -e /etc/debian_version ]; then
      # some Debians have jessie/sid in their /etc/debian_version
      # while others have '6.0.7'
      os=`cat /etc/issue | head -1 | awk '{ print tolower($1) }'`
      if grep -q '/' /etc/debian_version; then
        dist=`cut --delimiter='/' -f1 /etc/debian_version`
      else
        dist=`cut --delimiter='.' -f1 /etc/debian_version`
      fi

    else
      unknown_os
    fi
  fi

  if [ -z "$dist" ]; then
    unknown_os
  fi

  # remove whitespace from OS and dist name
  os="${os// /}"
  dist="${dist// /}"

  echo "Detected operating system as $os."
}

recommended ()
{
    echo "*** Recommended: ***"
    echo "____________________"
    echo "You have to create LVM in youe Machine and after that try to install Posgresql"
}

main ()
{
    check_root
    internet_connection
    detect_os
    if [ ${os} == Ubuntu ]; then 
        read_m_s
        input
        sleep 2
        recommended
        check_gitlab
        ssh_keygen
        rsync ${file} ${name}@${slavehost}:/home/${name}
        rsync ./postgres.sh ${name}@${slavehost}:/home/${name}
        ssh -T -t ${name}@${slavehost} 
    else
        echo "can not Install Script in this Version Operation. "
    fi
}
main
